.版本 2

.DLL命令 选入设备场景_, 整数型, "gdi32.dll", "SelectObject", 公开
    .参数 设备场景句柄, 整数型
    .参数 对象句柄, 整数型

.DLL命令 删除对象_, 整数型, "gdi32.dll", "DeleteObject", 公开
    .参数 对象句柄, 整数型, , 一个GDI对象的句柄

.DLL命令 创建阴影刷子_, 整数型, "gdi32.dll", "CreateHatchBrush", 公开, 如果刷子不再需要，就用“删除对象_”将其删除
    .参数 刷子阴影类型, 整数型, , 请查看此参数的常量
    .参数 指定刷子的RGB前景色, 整数型, , 指定刷子的前景颜色值

.DLL命令 创建纯色刷子_, 整数型, "gdi32.dll", "CreateSolidBrush", 公开, 如果刷子不再需要，就用“删除对象_”将其删除
    .参数 颜色值, 整数型

.DLL命令 文本绘图_, 逻辑型, "gdi32.dll", "TextOutA", 公开, 非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 横, 整数型, , 绘图的起点，采用逻辑坐标
    .参数 纵, 整数型, , 绘图的起点，采用逻辑坐标
    .参数 内容, 文本型, , 欲描绘的字串
    .参数 内容数量, 整数型, , 字串中要描绘的字符数量

.DLL命令 PolyPolygon_, 整数型, "gdi32", "PolyPolygon", 公开, 用当前选定画笔描绘两个或多个多边形。根据由SetPolyFillMode函数指定的多边形填充模式，用当前选定的刷子填充它们。每个多边形都必须是封闭的  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 要在其中绘图的设备场景
    .参数 lpPoint, 坐标_整数, 数组, POINTAPI，nCount POINTAPI结构数组中的第一个POINTAPI结构
    .参数 lpPolyCounts, 整数型, 数组, 在Long值数组中的第一个条目。每个条目都包含了一定数量的点，用于构成一个封闭的多边形。lpPoint数组由一系列封闭的多边形构成，每个在lpPolyCounts数组中都有一个条目
    .参数 nCount, 整数型, , 要描绘的多边形总数（就是lpPolyCounts数组的大小）。至少为2;

.DLL命令 PtInRect_, 逻辑型, "user32", "PtInRect", 公开, 这个函数判断指定的点是否位于矩形lpRect内部  非零表示成功，零表示失败。会设置GetLastError
    .参数 lpRect, 矩形区域
    .参数 x, 整数型
    .参数 y, 整数型

.DLL命令 PtInRegion_, 逻辑型, "gdi32", "PtInRegion", 公开, 确定点是否在指定区域内  若点在区域内为非零值，否则为0
    .参数 hRgn, 整数型, , 区域句柄
    .参数 x, 整数型, , 以逻辑坐标表示的点的X坐标
    .参数 y, 整数型, , 以逻辑坐标表示的点的Y坐标在vb里使用在测试复杂图象时非常有用;

.DLL命令 合并区域_, 整数型, "gdi32", "CombineRgn", 公开, 将两个区域组合为一个新区域  下列常数之一：;    COMPLEXREGION：区域有互相交叠的边界;    SIMPLEREGION：区域边界没有互相交叠;    NULLREGION：区域为空;    ERRORAPI：不能创建组合区域
    .参数 新区域句柄, 整数型, , 包含组合结果的区域句柄
    .参数 源区域1, 整数型, , 源区域1
    .参数 源区域2, 整数型, , 源区域2
    .参数 组合方式, 整数型, , 组合两区域的方法。可设为下述常数：RGN_AND：hDestRgn被设置为两个源区域的交集；RGN_COPY：hDestRgn被设置为hSrcRgn1的拷贝；RGN_DIFF：hDestRgn被设置为hSrcRgn1中与hSrcRgn2不相交的部分；RGN_OR：hDestRgn被设置为两个区域的并集；RGN_XOR：hDestRgn被设置为除两个源区域OR之外的部分。

.DLL命令 创建多点围成的区域_, 整数型, "gdi32", "CreatePolygonRgn", 公开, 创建一个由一系列点围成的区域。windows在需要时自动将最后点与第一点相连以封闭多边形  执行成功为创建的区域句柄，失败则为0。如果区域句柄不再需要，就用“删除对象_”将其删除
    .参数 坐标组, 坐标_整数, 数组, POINTAPI，nCount个POINTAPI结构中的第一个POINTAPI结构
    .参数 多边形点数, 整数型, , 多边形的点数
    .参数 填充模式, 整数型, , 描述多边形填充模式。可为ALTERNATE 或 WINDING常数。参考SetPolyFillMode函数对多边形填充模式的解释;

.DLL命令 创建矩形区域_, 整数型, "gdi32", "CreateRectRgn", 公开, 创建一个由点X1，Y1和X2，Y2描述的矩形区域  执行成功为区域句柄，失败则为零。如果区域句柄不再需要，就用“删除对象_”将其删除
    .参数 左上横坐标, 整数型, , 矩形左上角X，Y坐标
    .参数 左上纵坐标, 整数型, , 同上
    .参数 右下横坐标, 整数型, , 矩形右下角X，Y坐标;
    .参数 右下纵坐标, 整数型, , 同上;

.DLL命令 创建圆角矩形区域_, 整数型, "gdi32", "CreateRoundRectRgn", 公开, 创建一个圆角矩形，该矩形由X1，Y1-X2，Y2确定，并由X3，Y3确定的椭圆描述圆角弧度  执行成功则为区域句柄，失败则为0。如果区域句柄不再需要，就用“删除对象_”将其删除
    .参数 左上横坐标, 整数型, , 矩形左上角的X，Y坐标
    .参数 左上纵坐标, 整数型, , 同上
    .参数 右下横坐标, 整数型, , 矩形右下角的X，Y坐标
    .参数 右下纵坐标, 整数型, , 同上
    .参数 圆角椭圆的宽, 整数型, , 圆角椭圆的宽。其范围从0（没有圆角）到矩形宽（全圆）
    .参数 圆角椭圆的高, 整数型, , 圆角椭圆的高。其范围从0（没有圆角）到矩形高（全圆）;

.DLL命令 创建内切椭圆_, 整数型, "gdi32", "CreateEllipticRgn", 公开, 创建一个椭圆区域，该椭圆与X1，Y1和X2，Y2坐标点确定的矩形内切  执行成功则为区域句柄，失败则为零。如果区域句柄不再需要，就用“删除对象_”将其删除
    .参数 左上角横坐标, 整数型, , 矩形左上角X，Y坐标
    .参数 左上角纵坐标, 整数型, , 同上
    .参数 右下角横坐标, 整数型, , 矩形右下角X，Y坐标;
    .参数 右下角纵坐标, 整数型, , 同上;

.DLL命令 刷子填充区域_, 整数型, "gdi32", "FillRgn", 公开, 用指定刷子填充指定区域  执行成功为非零值，失败则为0
    .参数 设备场景句柄, 整数型, , 设备场景句柄
    .参数 区域句柄, 整数型, , 以数据设备坐标填充的区域句柄
    .参数 刷子句柄, 整数型, , 要用的刷子的句柄;

.DLL命令 画区域外框_, 整数型, "gdi32", "FrameRgn", 公开, 用指定刷子围绕指定区域画一个外框  执行成功返回非零值，失败为0
    .参数 设备场景, 整数型, , 设备场景句柄
    .参数 区域句柄, 整数型, , 将数据设备坐标填充的区域句柄
    .参数 刷子句柄, 整数型, , 将用的刷子句柄
    .参数 垂直边框宽度, 整数型, , 垂直边框宽度（以设备单元为单位）
    .参数 水平边框高度, 整数型, , 水平边框高度（以设备单元为单位）;

.DLL命令 反转区域_, 整数型, "gdi32", "InvertRgn", 公开, 通过颠倒每个像素值反转设备场景指定区域  执行成功为非零值，失败为零
    .参数 设备场景句柄, 整数型, , 设备场景句柄
    .参数 将反转的区域, 整数型, , 将反转的设备区域;

.DLL命令 移动区域_, 整数型, "gdi32", "OffsetRgn", 公开, 按指定偏移量平移指定区域  下列常数之一，以描述当前剪裁区：;    COMPLEXREGION：该区域有互相交叠的边界;    SIMPLEREGION：该区域边界没有互相交叠;    NULLREGION：区域为空;    ERRORAPI：发生了错误
    .参数 区域句柄, 整数型, , 区域句柄
    .参数 横向移动量, 整数型, , 以逻辑坐标表示的水平偏移量
    .参数 纵向移动量, 整数型, , 以逻辑坐标表示的垂直偏移量;

.DLL命令 判断矩形区域_, 整数型, "gdi32", "RectInRegion", 公开, 确定矩形是否有部分在指定区域内  若矩形有部分在指定区域内为非零值，否则为0
    .参数 区域句柄, 整数型, , 区域句柄
    .参数 要测试的矩形结构, 矩形区域, , RECT，要测试的矩形结构;

.DLL命令 设置窗口区域_, 整数型, "user32", "SetWindowRgn", 公开, 这是那些很难有人注意到的对编程者来说是个巨大的宝藏的隐含的API函数中的一个。本函数允许您改变窗口的区域。<br>;    通常所有窗口都是矩形的——窗口一旦存在就含有一个矩形区域。本函数允许您放弃该区域。这意味着您可以创建圆的、星形的窗口，也可以将它分为两个或许多部分——实际上可以是任何形状  执行成功为非零值，失败为0
    .参数 窗口句柄, 整数型, , 将设置其区域的窗口
    .参数 区域, 整数型, , 将设置的区域的句柄，一旦设置了该区域，就不能使用或修改该区域句柄，也不要删除它
    .参数 自动刷新, 逻辑型, , Boolean，若为TRUE，则立即重画窗口;

.DLL命令 画图标_, 整数型, "user32", "DrawIcon", 公开, 在指定的位置画一个图标  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景
    .参数 横坐标, 整数型, , 想描绘图标的位置（逻辑坐标）
    .参数 纵坐标, 整数型, , 同上
    .参数 图标句柄, 整数型, , 欲描绘图标的句柄;

.DLL命令 画图标扩展_, 整数型, "user32", "DrawIconEx", 公开, 描绘一个图标或鼠标指针。与DrawIcon相比，这个函数提供了更多的功能  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 要在其中画图的一个设备场景的句柄
    .参数 左边尽头, 整数型, , 图标左上角的位置，用逻辑坐标表示
    .参数 顶边尽头, 整数型, , 同上
    .参数 图标句柄, 整数型, , 要描绘的图标的句柄
    .参数 描绘宽度, 整数型, , 希望的图标宽度和高度。图标会自动缩放，与指定的值相符
    .参数 描绘高度, 整数型, , 同上
    .参数 描绘的帧, 整数型, , 如果hIcon是个动画指针，那么该参数指定描绘动画中的哪幅图象。注意Win32不能区分图标和指针
    .参数 刷子句柄, 整数型, , 如设为一个刷子句柄，那么函数会将图标画入一幅内存位图，并用背景色填充。随后，将图象直接复制到指定的位置。这样做可绘图时减少闪烁（因为画图过程中重现）
    .参数 描绘标志, 整数型, , 下述常数之一：;DI_COMPAT：描绘标准的系统指针，而不是指定的图象;DI_DEFAULTSIZE：忽略cxWidth和cyWidth设置，并采用原始的图标大小;DI_IMAGE：绘图时使用图标的XOR部分（即图标没有透明区域）;DI_MASK：绘图时使用图标的MASK部分（如单独使用，可获得图标的掩模）;DI_NORMAL：用常规方式绘图（合并 DI_IMAGE 和 DI_MASK）;

.DLL命令 清除图标_, 整数型, "user32", "DestroyIcon", 公开, 清除图标  非零表示成功，零表示失败。会设置GetLastError
    .参数 图标句柄, 整数型, , 图标句柄;

.DLL命令 SetTextJustification_, 整数型, "gdi32", "SetTextJustification", 公开, 通过指定一个文本行应占据的额外空间，可用这个函数对文本进行两端对齐处理  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 nBreakExtra, 整数型, , 描绘时欲添加到字串的额外空间大小
    .参数 nBreakCount, 整数型, , 用于分散额外空间的分隔字符的数量在VB里使用如使用了这个函数，要确定针对VB窗体或控件清除错误条件;

.DLL命令 刷子起点_, 整数型, "gdi32", "GetBrushOrgEx", 公开, 判断指定设备场景中当前选定刷子起点  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 点, 坐标_整数, , POINTAPI，这个结构用来装载当前刷子的起点;

.DLL命令 设置刷子起点_, 整数型, "gdi32", "SetBrushOrgEx", 公开, 为指定的设备场景设置当前选定刷子的起点  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 定义起点x, 整数型, , 刷子的新起点，采用设备坐标表示。取值范围在0-7之间（不需要更大的值，因为windows95下最大的刷子的尺寸是8×8；而这个函数在NT下是不必要的）
    .参数 定义起点y, 整数型, , 同上
    .参数 装载结构, 坐标_整数, , POINTAPI，用于装载前一个刷子的起点  在vb里使用注意完成以后一定要将设备场景的刷子起点设为0，0。既可明确指定坐标，也可用RestoreDC函数恢复恢复原始的DC;

.DLL命令 设置时钟_, 整数型, "user32", "SetTimer", 公开, 安装系统定时器
    .参数 窗口句柄, 整数型
    .参数 事件标识符, 整数型
    .参数 时钟周期, 整数型
    .参数 回调函数地址, 整数型

.DLL命令 销毁时钟_, 整数型, "user32", "KillTimer", 公开, 中止定时器
    .参数 窗口句柄, 整数型
    .参数 事件标识符, 整数型

.DLL命令 获取最小矩形_, 整数型, "gdi32", "GetRgnBox", 公开, 获取完全包含指定区域的最小矩形  下列常数之一，以描述当前剪裁区：;    COMPLEXREGION：该区域有互相交叠的边界;    SIMPLEREGION：该区域边界没有互相交叠;    NULLREGION：区域为空;    ERRORAPI：发生了错误
    .参数 区域, 整数型, , 区域句柄
    .参数 矩形区域, 矩形区域, , RECT，矩形结构，装载完全包含指定区域的矩形;

.DLL命令 剪裁矩形区_, 整数型, "gdi32", "ExcludeClipRect", 公开, 从专用设备场景的剪裁区中去掉一个由点X1，Y1和X2，Y2确定的矩形区。矩形内不能进行绘图  返回以下常数之一以描述所得剪裁区：;    COMPLEXREGION：区域边界互相交叠;    SIMPLEREGION：区域边界没有互相交叠;    NULLREGION：区域为空;    ERRORAPI：发生了错误
    .参数 设备场景句柄, 整数型, , 要修改的设备场景
    .参数 被剪裁矩形区左上角的横坐标, 整数型, , 矩形（逻辑坐标）左上角的X，Y坐标
    .参数 被剪裁矩形区左上角的纵坐标, 整数型, , 同上
    .参数 被剪裁矩形区右下角的横坐标, 整数型, , 矩形（逻辑坐标）右下角的X，Y坐标，矩形的右边和下边不会从剪裁区中移走
    .参数 被剪裁矩形区右下角的纵坐标, 整数型, , 同上;

.DLL命令 定义剪裁区_, 整数型, "gdi32", "IntersectClipRect", 公开, 为指定设备定义一个新的剪裁区，该区为当前剪裁区与由点X1，Y1和X2，Y2定义的矩形的交集  下列常数之一，以描述当前剪裁区：;    COMPLEXREGION：该区域有互相交叠的边界;    SIMPLEREGION：该区域边界没有互相交叠;    NULLREGION：区域为空;    ERRORAPI：发生了错误
    .参数 设备场景句柄, 整数型, , 设备场景
    .参数 矩形左上角横坐标, 整数型, , 矩形左上角X，Y坐标
    .参数 矩形左上角纵坐标, 整数型, , 同上
    .参数 矩形右下角横坐标, 整数型, , 矩形右下角X，Y坐标
    .参数 矩形右下角纵坐标, 整数型, , 同上;

.DLL命令 GdipDeletePath, 整数型, "gdiplus", "GdipDeletePath", 公开
    .参数 path, 整数型

.DLL命令 CombineTransform_, 整数型, "gdi32", "CombineTransform", 公开, 驱动世界转换。它相当于依顺序进行两次转换  执行成功为TRUE（非零），失败则为零
    .参数 保存转换结果, XFORM, , xform，保存转换结果的结构
    .参数 第一个结构, XFORM, , xform，按顺序的第一个结构
    .参数 第二个结构, XFORM, , xform，按顺序的第二个结构适用平台Windows NT;

.DLL命令 GetWorldTransform_, 整数型, "gdi32", "GetWorldTransform", 公开, 如果有世界转换，为设备场景获取当前世界转换  执行成功为非零值，失败为0
    .参数 hdc, 整数型, , 设备场景句柄
    .参数 lpXform, XFORM, , xform，装载设备场景当前世界转换的结构适用平台Windows NT;

.DLL命令 偏移矩形_, 整数型, "user32", "OffsetRect", 公开, 该函数通过应用一个指定的偏移，从而让矩形移动起来。x会添加到右侧和左侧区域。y添加到顶部和底部区域。偏移方向则取决于参数是正数还是负数，以及采用的是什么坐标系统  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标矩形, 矩形区域, , RECT，欲移动的矩形
    .参数 水平偏移量, 整数型, , 水平偏移量
    .参数 垂直偏移量, 整数型, , 垂直偏移量;

.DLL命令 拷贝矩形结构_, 整数型, "user32", "CopyRect", 公开, 将矩形的lpSourceRect内容复制给矩形lpDestRect  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标矩形, 矩形区域, , RECT，目标矩形结构
    .参数 源矩形, 矩形区域, , RECT，源矩形;

.DLL命令 修改矩形_, 整数型, "user32", "InflateRect", 公开, 这个函数用于增大或减小一个矩形的大小。x加在右侧区域，并从左侧区域减去；如x为正，则能增大矩形的宽度；如x为负，则能减小它。y对顶部与底部区域产生的影响是是类似的  非零表示成功，零表示失败。会设置GetLastError
    .参数 修改的矩形, 矩形区域, , RECT，欲修改的矩形
    .参数 修改的宽度, 整数型, , 用这个数字修改宽度
    .参数 修改的高度, 整数型, , 用这个数字修改高度;

.DLL命令 载入矩形_, 整数型, "user32", "IntersectRect", 公开, 这个函数在lpDestRect里载入一个矩形，它是lpSrc1Rect与lpSrc2Rect两个矩形的交集。如两个源矩形根本未发生重叠，则lpDestRect会被设为一个空矩形  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标矩形, 矩形区域, , RECT，目标矩形，用于包含lpSrc1Rect与lpSrc2Rect两个矩形的重合部分
    .参数 源矩形1, 矩形区域, , RECT，第一个源矩形
    .参数 源矩形2, 矩形区域, , RECT，第二个源矩形;

.DLL命令 SubtractRect_, 整数型, "user32", "SubtractRect", 公开, 这个函数会装载矩形lprcDst，它是在矩形lprcSrc1中减去lprcSrc2得到的结果  TRUE（非零）表示成功，零表示失败
    .参数 lprcDst, 矩形区域, , RECT，准备包容lprcSrc1减lprcSrc2结果的目标矩形
    .参数 lprcSrc1, 矩形区域, , RECT，第一个源矩形
    .参数 lprcSrc2, 矩形区域, , RECT，第二个源矩形;

.DLL命令 UnionRect_, 整数型, "user32", "UnionRect", 公开, 这个函数会装载一个lpDestRect目标矩形，它是lpSrc1Rect和lpSrc2Rect联合起来的结果。目标矩形的所有点都同时位于两个源矩形里；也即是它们的一个交集  非零表示成功，零表示失败。会设置GetLastError
    .参数 lpDestRect, 矩形区域, , RECT，用于容纳lpSrc1Rect和lpSrc2Rect联合运算结果的目标矩形
    .参数 lpSrc1Rect, 矩形区域, , RECT，第一个源矩形
    .参数 lpSrc2Rect, 矩形区域, , RECT，第二个源矩形;

.DLL命令 设置矩形_, 整数型, "user32", "SetRect", 公开, 设置指定矩形的内容  非零表示成功，零表示失败。会设置GetLastError
    .参数 矩形, 矩形区域, , RECT，欲设置的矩形
    .参数 左边, 整数型, , 左侧区域（Left）的值
    .参数 顶边, 整数型, , 顶部区域（Top）的值
    .参数 右边, 整数型, , 右侧区域（Right）的值
    .参数 底边, 整数型, , 底部区域（Bottom）的值;

.DLL命令 拷贝_整数数组到字节集, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 pBlock, 字节集
    .参数 缓冲区, 整数型, 数组
    .参数 尺寸, 整数型

.DLL命令 拷贝_字节集到整数数组, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 pBlock, 整数型, 数组
    .参数 缓冲区, 字节集
    .参数 尺寸, 整数型

.DLL命令 移动设备场景_, 整数型, "gdi32", "OffsetViewportOrgEx", 公开, 平移设备场景视口区域（设备环境的观察窗原点）  执行成功为非零值，失败为0
    .参数 设备场景句柄, 整数型, , 设备场景句柄
    .参数 横向移动量, 整数型, , 将加到视口起点的水平和垂直偏移量（以设备坐标表示）
    .参数 纵向移动量, 整数型, , 同上
    .参数 源设备场景起始位置, 坐标_整数, , POINTAPI，装载设备场景视口原先的起点的结构，以设备坐标表示;

.DLL命令 移动设备场景起始位置_, 整数型, "gdi32", "OffsetWindowOrgEx", 公开, 平移指定设备场景窗口起点（设备环境的窗口原点）  执行成功为非零值，失败为0
    .参数 设备场景句柄, 整数型, , 设备场景句柄
    .参数 横向移动量, 整数型, , 以逻辑坐标表示的窗口起点
    .参数 纵向移动量, 整数型, , 同上
    .参数 源起始位置, 坐标_整数, , POINTAPI，装载DC窗口原有的起点的的结构，以逻辑坐标表示;

