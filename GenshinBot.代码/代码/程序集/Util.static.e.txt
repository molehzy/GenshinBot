.版本 2
.支持库 eAPI
.支持库 CommonSupport
.支持库 spec
.支持库 e2ee

.程序集 Util
.程序集变量 pidfilenum, 整数型

.子程序 _运行检测
    .参数 Type, 整数型
    .局部变量 filename, 文本型
    .局部变量 runpath, 文本型
    .局部变量 info, 进程信息, , "0"
    .局部变量 i, 整数型
    .局部变量 pidfile, 文本型

    filename ＝ 取执行文件名 ()
    runpath ＝ 取运行目录 ()
    info ＝ 取系统进程列表 ()
    pidfile ＝ runpath ＋ “\” ＋ filename ＋ “.pid”
    
    .判断开始 (Type ＝ 0)
        pidfilenum ＝ 打开文件 (pidfile, 5, 4)
        .如果真 (pidfilenum ＝ 0)
            信息框 (“禁止多开”, 0, “警告！”, )
            结束 ()
        .如果真结束
        
        .计次循环首 (取数组成员数 (info), i)
            
            .如果真 (info [i].进程名称 ＝ filename)
                写出字节集 (pidfilenum, 文本到UTF8 (“PID=” ＋ 到文本 (info [i].进程标识符) ＋ #换行符 ＋ “PATH=” ＋ runpath ＋ “\” ＋ filename))
            .如果真结束
            
        .计次循环尾 ()
        
    .判断 (Type ＝ 1)
        关闭文件 (pidfilenum)
        延迟 (1000)
        删除文件 (pidfile)
        
    .默认
        
    .判断结束
    

.子程序 _初始化目录
    应用目录 ＝ 取运行目录 () ＋ “\Data\”
    日志目录 ＝ 取运行目录 () ＋ “\Log\”
    图片目录 ＝ 应用目录 ＋ “Img\”
    绑定目录 ＝ 应用目录 ＋ “Bind_db\”
    配置文件 ＝ 应用目录 ＋ “Config.ini”
    群配置文件 ＝ 应用目录 ＋ “Group.ini”
    
    路径_创建多级目录 (应用目录)
    路径_创建多级目录 (日志目录)
    路径_创建多级目录 (图片目录)
    路径_创建多级目录 (图片目录 ＋ “character_side_icon\”)
    路径_创建多级目录 (图片目录 ＋ “character_icon\”)
    

.子程序 _初始化日志
    日志 (“初始化日志 | ” ＋ 日志.初始化 (日志目录))
    Debug (“初始化Debug文件 | ” ＋ 日志_Debug.初始化 (日志目录, “Debug”))
    

.子程序 日志
    .参数 信息, 文本型

    日志.写_ (_启动窗口.编辑框_日志, 创建文本从时间 (取现行时间 (), “%m/%d %H:%M:%S”, ) ＋ “|” ＋ 信息)
    

.子程序 Debug
    .参数 信息, 文本型

    日志_Debug.写_ (_启动窗口.编辑框_Debug, 创建文本从时间 (取现行时间 (), “%m/%d %H:%M:%S”, ) ＋ “|” ＋ 信息)
    

.子程序 _初始化配置文件
    日志 (“初始化配置文件 |”)
    _启动窗口.编辑框_WS.内容 ＝ 读配置项 (配置文件, “CFG”, “WS”, “127.0.0.1:6700”)
    _启动窗口.编辑框_Token.内容 ＝ 读配置项 (配置文件, “CFG”, “Token”, )
    _启动窗口.编辑框_HTTP.内容 ＝ 读配置项 (配置文件, “CFG”, “HTTP”, “127.0.0.1:5700”)
    _启动窗口.编辑框_绑定.内容 ＝ 读配置项 (配置文件, “BOT”, “绑定”, “YS绑定/(.+)/(.+)/(.+)”)
    _启动窗口.编辑框_菜单.内容 ＝ 读配置项 (配置文件, “BOT”, “菜单”, “YSHELP”)
    _启动窗口.编辑框_菜单路径.内容 ＝ 读配置项 (配置文件, “BOT”, “菜单路径”, 应用目录 ＋ “\menu.png”)
    _启动窗口.编辑框_实时便笺.内容 ＝ 读配置项 (配置文件, “BOT”, “实时便笺”, “YS便笺/(.+)”)
    _启动窗口.编辑框_数据总览.内容 ＝ 读配置项 (配置文件, “BOT”, “数据总览”, “YS数据/(.+)”)
    _启动窗口.编辑框_手札.内容 ＝ 读配置项 (配置文件, “BOT”, “手札”, “YS手札/(.+)”)
    _启动窗口.编辑框_签到.内容 ＝ 读配置项 (配置文件, “BOT”, “签到”, “YS签到/(.+)”)
    _启动窗口.编辑框_读绑定.内容 ＝ 读配置项 (配置文件, “BOT”, “读绑定”, “YS绑定”)
    _启动窗口.编辑框_删绑定.内容 ＝ 读配置项 (配置文件, “BOT”, “删绑定”, “YS解绑/(.+)”)
    _启动窗口.编辑框_本期深渊.内容 ＝ 读配置项 (配置文件, “BOT”, “本期深渊”, “YS本期深渊/(.+)”)
    _启动窗口.编辑框_上期深渊.内容 ＝ 读配置项 (配置文件, “BOT”, “上期深渊”, “YS上期深渊/(.+)”)
    _启动窗口.编辑框_角色.内容 ＝ 读配置项 (配置文件, “BOT”, “角色”, “YS角色/(.+)”)
    

.子程序 _初始化子程序
    日志 (“初始化子程序 |”)
    CQ.初始化 (&private, &group, &notice, &request, &ws)
    线程锁.创建 ()
    日志 (“消息线程池: ” ＋ 到文本 (线程池_消息.创建 (&消息线程, , 2, 4)))
    
    

.子程序 时间_秒到时分秒格式, 文本型, , 精益模块
    .参数 秒, 整数型
    .参数 格式, 文本型, 可空, 默认:d天h小时m分s秒
    .参数 自动补零, 逻辑型, 可空, 不足2位数自动前面补0
    .局部变量 局_天, 整数型
    .局部变量 局_小时, 整数型
    .局部变量 局_分, 整数型
    .局部变量 局_秒, 整数型
    .局部变量 局_位置, 整数型
    .局部变量 局_Time, 文本型

    局_秒 ＝ 秒
    .如果真 (是否为空 (格式) 或 格式 ＝ “”)
        格式 ＝ “d天h小时m分s秒”
    .如果真结束
    
    局_天 ＝ 局_秒 ÷ 86400
    局_小时 ＝ 局_秒 ％ 86400 ÷ 3600
    局_分 ＝ 局_秒 ％ 86400 ％ 3600 ÷ 60
    局_秒 ＝ 局_秒 ％ 86400 ％ 3600 ％ 60
    
    局_位置 ＝ 倒找文本 (格式, “d”, , 假)
    .如果真 (局_位置 ≠ -1)
        局_Time ＝ 到文本 (局_天)
        .如果真 (自动补零)
            局_Time ＝ 文本_自动补零 (局_Time, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 局_位置, 1, 局_Time)
    .如果真结束
    
    局_位置 ＝ 倒找文本 (格式, “h”, , 假)
    .如果真 (局_位置 ≠ -1)
        局_Time ＝ 到文本 (局_小时)
        .如果真 (自动补零)
            局_Time ＝ 文本_自动补零 (局_Time, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 局_位置, 1, 局_Time)
    .如果真结束
    
    局_位置 ＝ 倒找文本 (格式, “m”, , 假)
    .如果真 (局_位置 ≠ -1)
        局_Time ＝ 到文本 (局_分)
        .如果真 (自动补零)
            局_Time ＝ 文本_自动补零 (局_Time, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 局_位置, 1, 局_Time)
    .如果真结束
    
    局_位置 ＝ 倒找文本 (格式, “s”, , 假)
    .如果真 (局_位置 ≠ -1)
        局_Time ＝ 到文本 (局_秒)
        .如果真 (自动补零)
            局_Time ＝ 文本_自动补零 (局_Time, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 局_位置, 1, 局_Time)
    .如果真结束
    
    返回 (格式)

.子程序 文本_自动补零, 文本型, , 精益模块
    .参数 参_欲补齐文本, 文本型
    .参数 参_补齐长度

    返回 (取重复文本 (参_补齐长度 － 取文本长度 (参_欲补齐文本), “0”) ＋ 参_欲补齐文本)

.子程序 文件_枚举, 整数型, , 精益模块
    .参数 欲寻找的目录, 文本型, , 文件目录
    .参数 欲寻找的文件名, 文本型, , 如果寻找全部文件可以填入*.*，或*.txt只找txt文件, 多个后缀中间用“|”隔开
    .参数 文件数组, 文本型, 参考 可空 数组, 用于装载文件数组的变量；把寻找到的文件都放在这个数组里，并返回；
    .参数 是否带路径, 逻辑型, 可空, 默认为假； 真=带目录路径，如C:\012.txt； 假=不带，如 012.txt；
    .参数 是否按字母排序, 逻辑型, 可空, 默认为假；真=按字母a-z排序  假=不排序
    .参数 是否遍历子目录, 逻辑型, 可空, 留空默认为假；为真时文件数组不主动清空
    .局部变量 局_文件名, 文本型
    .局部变量 局_目录, 文本型
    .局部变量 局_后缀数组, 文本型, , "0"
    .局部变量 局_后缀总数, 整数型
    .局部变量 局_计次, 整数型

    .如果真 (是否遍历子目录 ＝ 假)
        清除数组 (文件数组)
    .如果真结束
    局_目录 ＝ 欲寻找的目录
    .如果真 (取文本右边 (局_目录, 1) ≠ “\”)
        局_目录 ＝ 局_目录 ＋ “\”
    .如果真结束
    局_后缀数组 ＝ 分割文本 (欲寻找的文件名, “|”, )
    局_后缀总数 ＝ 取数组成员数 (局_后缀数组)
    .计次循环首 (局_后缀总数, 局_计次)
        局_文件名 ＝ 寻找文件 (局_目录 ＋ 局_后缀数组 [局_计次], )
        .判断循环首 (局_文件名 ≠ “”)
            .如果真 (是否带路径)
                局_文件名 ＝ 局_目录 ＋ 局_文件名
            .如果真结束
            加入成员 (文件数组, 局_文件名)
            系统_处理事件1 ()
            局_文件名 ＝ 寻找文件 (, )
        .判断循环尾 ()
    .计次循环尾 ()
    .如果真 (是否按字母排序)
        数组_排序 (文件数组, 0, )
    .如果真结束
    .如果真 (是否遍历子目录)
        局_文件名 ＝ 寻找文件 (局_目录 ＋ “*.*”, #子目录)
        .判断循环首 (局_文件名 ≠ “”)
            .如果真 (局_文件名 ≠ “.” 且 局_文件名 ≠ “..”)
                文件_枚举 (局_目录 ＋ 局_文件名, 欲寻找的文件名, 文件数组, 是否带路径, 是否按字母排序, 是否遍历子目录)
                系统_处理事件1 ()
            .如果真结束
            局_文件名 ＝ 寻找文件 (, #子目录)
        .判断循环尾 ()
    .如果真结束
    返回 (取数组成员数 (文件数组))

.子程序 系统_处理事件1, , , 精益模块
    .局部变量 CurrMsg, MSG

    .判断循环首 (PeekMessage (CurrMsg, 0, 0, 0, 1)) ' #PM_REMOVE=1接收消息并从队列里除掉。
        TranslateMessage (CurrMsg)
        DispatchMessage (CurrMsg) ' 分发消息
    .判断循环尾 ()

.子程序 数组_排序, , , 精益模块
    .参数 要排序的数组, 文本型, 参考 数组
    .参数 排序方式, 字节型, 可空, 可空,默认为0  0=升序排序 1=降序排序
    .参数 区分大小写, 逻辑型, 可空, 可空,默认“真”。真=区分大小写，假=不区分
    .局部变量 N, 整数型
    .局部变量 排序数组, 文本型, , "0"
    .局部变量 成员数量, 整数型
    .局部变量 高位, 整数型
    .局部变量 低位, 整数型
    .局部变量 中间位, 整数型
    .局部变量 比较结果, 整数型, , , 感谢会员 落雪 提供代码

    复制数组 (排序数组, 要排序的数组)
    清除数组 (要排序的数组)
    .如果真 (是否为空 (区分大小写) ＝ 真)
        区分大小写 ＝ 真
    .如果真结束
    
    .计次循环首 (取数组成员数 (排序数组), N)
        .判断开始 (成员数量 ＝ 0)
            插入成员 (要排序的数组, 1, 排序数组 [N])
        .默认
            
            高位 ＝ 成员数量
            低位 ＝ 1
            中间位 ＝ (高位 ＋ 低位) ＼ 2
            ' ; lstrcmp 通过比较ASCII码进行文本的排序,速度快,但存在问题
            .判断开始 (区分大小写 ＝ 假)
                比较结果 ＝ 文本比较 (到大写 (排序数组 [N]), 到大写 (要排序的数组 [成员数量]), 真) ' 不区分就都算大写好了.因为在ACSII码中,大小写字母都是挨着的,所以不会出现"夹"在中间的字符.
            .默认
                比较结果 ＝ 文本比较 (排序数组 [N], 要排序的数组 [成员数量], 真)
            .判断结束
            
            .判断开始 (比较结果 ≥ 0)
                插入成员 (要排序的数组, 成员数量 ＋ 1, 排序数组 [N])
            .判断 (文本比较 (排序数组 [N], 要排序的数组 [1], 真) ≤ 0)
                插入成员 (要排序的数组, 1, 排序数组 [N])
            .默认
                .判断循环首 (高位 － 低位 ＞ 1)
                    .如果真 (排序数组 [N] ＝ 要排序的数组 [中间位])
                        跳出循环 ()
                    .如果真结束
                    .如果 (文本比较 (排序数组 [N], 要排序的数组 [中间位], 真) ＜ 0)
                        高位 ＝ 中间位
                    .否则
                        低位 ＝ 中间位
                    .如果结束
                    中间位 ＝ (高位 ＋ 低位) ＼ 2
                .判断循环尾 ()
                .判断开始 (文本比较 (排序数组 [N], 要排序的数组 [中间位], 真) ≤ 0)
                    插入成员 (要排序的数组, 中间位, 排序数组 [N])
                .默认
                    插入成员 (要排序的数组, 中间位 ＋ 1, 排序数组 [N])
                .判断结束
                
            .判断结束
            
        .判断结束
        成员数量 ＝ 取数组成员数 (要排序的数组)
    .计次循环尾 ()
    .如果真 (排序方式 ＝ 1)
        数组_反转 (要排序的数组)
    .如果真结束
    

.子程序 数组_反转, , , 精益模块
    .参数 反转的数组, 文本型, 参考 数组
    .局部变量 成员数量, 整数型
    .局部变量 折中数量, 整数型
    .局部变量 N, 整数型

    成员数量 ＝ 取数组成员数 (反转的数组)
    折中数量 ＝ 成员数量 ÷ 2
    .计次循环首 (折中数量, N)
        文本_交换变量 (反转的数组 [N], 反转的数组 [成员数量])
        成员数量 ＝ 成员数量 － 1
    .计次循环尾 ()

.子程序 文本_交换变量, , , 精益模块
    .参数 参数一, 文本型
    .参数 参数二, 文本型

    置入代码 ({ 139, 69, 8, 139, 77, 12, 139, 16, 135, 17, 137, 16 })
    ' mov eax,[ebp+8]
    ' mov ecx,[ebp+12]
    ' mov edx,dword ptr ds:[eax]
    ' xchg dword ptr ds:[ecx],edx
    ' mov dword ptr ds:[eax],edx

.子程序 文本_删右边, 文本型
    .参数 欲处理文本, 文本型
    .参数 删除长度, 整数型, , 以字符为单位
    .局部变量 szText, 字节集

    szText ＝ 文本到UTF8 (欲处理文本)
    szText ＝ 取字节集左边 (szText, 取字节集长度 (szText) － 删除长度 × 2)
    返回 (UTF8到文本 (szText))

.子程序 时间_时间戳转文本, 文本型, , 精益模块
    .参数 时间戳, 文本型
    .参数 小时制式, 整数型, 可空, 留空或为0取当前系统时间制式，1表示12小时制，2表示24小时制; 注: 本参数只对10位时间戳有效
    .局部变量 VBscript, 对象
    .局部变量 局_文本, 文本型
    .局部变量 局_数组, 文本型, , "0"
    .局部变量 局_时间, 日期时间型
    .局部变量 局_制式, 整数型

    .如果 (取文本长度 (时间戳) ＝ 10)
        局_时间 ＝ 增减时间 (到时间 (“1970.01.01 08:00:00”), #秒, 到整数 (时间戳))
        .如果 (小时制式 ≤ 0 或 小时制式 ＞ 2)
            局_制式 ＝ 时间_取制式 ()
        .否则
            局_制式 ＝ 小时制式 － 1
        .如果结束
        返回 (选择 (局_制式 ＝ 0, 时间_格式化 (局_时间, “yyyy-MM-dd ”, “hh:mm:ss”, ), 时间_格式化 (局_时间, “yyyy-MM-dd ”, “HH:mm:ss”, )))
        
    .否则
        COM线程初始化 ()
        .如果真 (VBscript.创建 (“ScriptControl”, ))
            VBscript.写属性 (“Language”, “JScript”)
            VBscript.数值方法 (“ExecuteStatement”, “function timea(){var d,s;d=new Date();d.setTime('” ＋ 时间戳 ＋ “');return(d);}”)
            局_文本 ＝ VBscript.通用方法 (“Run”, “timea”, ).取文本 ()
            VBscript.清除 ()
            COM线程释放 ()
            .如果真 (取文本长度 (局_文本) ＞ 0)
                局_数组 ＝ 分割文本 (局_文本, “ ”, )
                .如果真 (取数组成员数 (局_数组) ≥ 6)
                    .判断开始 (局_数组 [2] ＝ “Jan”)
                        局_数组 [2] ＝ “1”
                    .判断 (局_数组 [2] ＝ “Feb”)
                        局_数组 [2] ＝ “2”
                    .判断 (局_数组 [2] ＝ “Mar”)
                        局_数组 [2] ＝ “3”
                    .判断 (局_数组 [2] ＝ “Apr”)
                        局_数组 [2] ＝ “4”
                    .判断 (局_数组 [2] ＝ “May”)
                        局_数组 [2] ＝ “5”
                    .判断 (局_数组 [2] ＝ “Jun”)
                        局_数组 [2] ＝ “6”
                    .判断 (局_数组 [2] ＝ “Jul”)
                        局_数组 [2] ＝ “7”
                    .判断 (局_数组 [2] ＝ “Aug”)
                        局_数组 [2] ＝ “8”
                    .判断 (局_数组 [2] ＝ “Sep”)
                        局_数组 [2] ＝ “9”
                    .判断 (局_数组 [2] ＝ “Oct”)
                        局_数组 [2] ＝ “10”
                    .判断 (局_数组 [2] ＝ “Nov”)
                        局_数组 [2] ＝ “11”
                    .判断 (局_数组 [2] ＝ “Dec”)
                        局_数组 [2] ＝ “12”
                    .默认
                        
                    .判断结束
                    
                    返回 (局_数组 [6] ＋ “-” ＋ 文本_自动补零 (局_数组 [2], 2) ＋ “-” ＋ 文本_自动补零 (局_数组 [3], 2) ＋ “ ” ＋ 局_数组 [4])
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果结束
    返回 (“”)

.子程序 时间_格式化, 文本型, , 精益模块
    .参数 参_欲格式化时间, 日期时间型
    .参数 参_日期格式, 文本型, 可空, 可以为空，格式：yyyy [年]，M [月],d [日],dddd [星期]，如;yyyy/M/d dddd(年/月/日 星期几)
    .参数 参_时间格式, 文本型, 可空, 可以为空，格式：tt [上午或下午],h [小时],m [分钟], s [秒] 。如;hh:mm:ss(小时:分钟:秒),tt hh:mm:ss(上午或下午 小时:分钟:秒)
    .参数 参_是否为24小时制, 逻辑型, 可空
    .局部变量 局_系统时间, 精易_时间
    .局部变量 局_整数返回, 整数型
    .局部变量 局_日期, 文本型
    .局部变量 局_时间, 文本型
    .局部变量 局_Flags, 整数型

    .如果真 (是否为空 (参_日期格式) 且 是否为空 (参_时间格式))
        输出调试文本 (“日期格式和时间格式不能同时为空！请至少提供一个参数。”)
        返回 (“”)
    .如果真结束
    
    局_整数返回 ＝ VariantTimeToSystemTime (参_欲格式化时间, 局_系统时间)
    .如果真 (1 ＝ 局_整数返回)
        .如果真 (取文本长度 (参_日期格式) ＞ 2)
            局_日期 ＝ 取空白文本 (50)
            GetDateFormatA (0, 0, 局_系统时间, 参_日期格式, 局_日期, 50)
        .如果真结束
        .如果真 (取文本长度 (参_时间格式) ＞ 2)
            局_时间 ＝ 取空白文本 (50)
            .如果真 (参_是否为24小时制 ＝ 真)
                局_Flags ＝ #TIME_FORCE24HOURFORMAT
            .如果真结束
            GetTimeFormatA (0, 局_Flags, 局_系统时间, 参_时间格式, 局_时间, 50)
        .如果真结束
        返回 (局_日期 ＋ 局_时间)
    .如果真结束
    返回 (“”)

.子程序 时间_取制式, 整数型, , 精益模块
    .局部变量 iTime, 文本型

    iTime ＝ 取空白文本 (4)
    GetLocaleInfo (0, #LOCALE_ITIME, iTime, 4)
    返回 (到整数 (iTime))

.子程序 _到百分比, 文本型
    .参数 文本, 文本型

    返回 (数值到格式文本 (到整数 (文本) ÷ 10, 1, 假) ＋ “%”)
    

